version: "3.9"

services:
  # PostgreSQL service
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - local-envoii

  # documentation service
  docs:
    container_name: docs
    image: ghcr.io/envoii-technologies/documentation-service:latest-develop
    ports:
      - "3400:3400"
    networks:
      - local-envoii

  # Auth service (Keycloak)
  auth:
    # image: quay.io/keycloak/keycloak:latest
    image: ghcr.io/envoii-technologies/auth-service:latest-develop
    container_name: auth
    command:
      - start
      - --https-port=443
      - --hostname=${ME_HOSTNAME}
      #      - --hostname-port=443
      #      - --hostname-admin-url=${ROOT_URL}/auth/admin
      - --proxy=edge
      # - --log-level=debug
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIM_PASSWORD}
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HTTPS_PORT: 443
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      PROXY_ADDRESS_FORWARDING: true
      KEYCLOAK_FRONTEND_URL: ${ROOT_URL}/auth/
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - local-envoii

  # Backwards proxy
  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: "off" # Use 'off' for DB-less mode
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
    volumes:
      - ./proxy/kong.yml:/etc/kong/kong.yml # Mount the kong.yml file
      - ./proxy/kong.conf.default:/etc/kong/kong.conf.default
      - ./proxy/kong.conf:/etc/kong/kong.conf
    ports:
      - "80:8000" # HTTP traffic
      - "443:8443" # HTTPS traffic
      - "8001:8001" # Admin API (non-SSL)
      - "8444:8444" # Admin API (SSL)
    networks:
      - local-envoii

  # React frontend
  frontend:
    container_name: frontend
    stdin_open: true
    image: ghcr.io/envoii-technologies/frontend-service:latest-develop
    ports:
      - 3000:3000
      - 3001:3001
    volumes:
      - "/app/node_modules"
      - "./:/app"
    networks:
      - local-envoii

  # migration service
  migration:
    image: ghcr.io/envoii-technologies/migration-service:latest-develop
    container_name: migration
    restart: on-failure
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      KEYCLOAK_ADMIN_USERNAME: ${KEYCLOAK_ADMIM}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIM_PASSWORD}
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      MAX_RETRIES: 10
      ROOT_URL: ${ROOT_URL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
      - tenant
      - user
    networks:
      - local-envoii

  # tenant service
  tenant:
    image: ghcr.io/envoii-technologies/tenant-service:latest-develop
    container_name: tenant
    restart: on-failure
    ports:
      - "4000:4000"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: tenant-service
      SERVICE_PORT: 4000
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # user service
  user:
    image: ghcr.io/envoii-technologies/user-service:latest-develop
    container_name: user
    restart: on-failure
    ports:
      - "4001:4001"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: user-service
      SERVICE_PORT: 4001
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # card service
  card:
    image: ghcr.io/envoii-technologies/card-service:latest-develop
    container_name: card
    restart: on-failure
    ports:
      - "4002:4002"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: card-service
      SERVICE_PORT: 4002
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # tag service
  tag:
    image: ghcr.io/envoii-technologies/tag-service:latest-develop
    container_name: tag
    restart: on-failure
    ports:
      - "4003:4003"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: tag-service
      SERVICE_PORT: 4003
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # media service
  media:
    image: ghcr.io/envoii-technologies/media-service:latest-develop
    container_name: media
    restart: on-failure
    ports:
      - "4004:4004"
    environment:
      NODE_ENV: development
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: media-service
      SERVICE_PORT: 4004
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
      STORAGE_ENV: ${STORAGE_ENV}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESSKEY: ${STORAGE_ACCESSKEY}
      STORAGE_SECRETKEY: ${STORAGE_SECRETKEY}
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # category service
  category:
    image: ghcr.io/envoii-technologies/category-service:latest-develop
    container_name: category
    restart: on-failure
    ports:
      - "4005:4005"
    environment:
      NODE_ENV: development
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: category-service
      SERVICE_PORT: 4005
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # MongoDB service
  #mongodb:
  #  image: mongo:latest
  #  container_name: mongodb
  #  environment:
  #    MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
  #    MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  #  ports:
  #    - "27017:27017"
  #  volumes:
  #    - mongodb-data:/data/db
  #  networks:
  #    - local-envoii

  # database check
  #mongo-express:
  #  container_name: mongo-express
  #  image: mongo-express
  #  restart: always
  #  ports:
  #    - 8081:8081
  #  environment:
  #    ME_CONFIG_MONGODB_URL: ${MONGO_URL}admin?tls=${MONGO_SSL}&authSource=${MONGO_AUTHSOURCE}${MONGO_ADDITIONAL_QUERY_PARAMS}
  #    ME_CONFIG_MONGO_DB_SERVER: mongodb
  #    ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
  #    ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
  #  networks:
  #    - local-envoii

volumes:
  postgres-data:
  #mongodb-data:

networks:
  local-envoii:
    # external: true
    driver: bridge
