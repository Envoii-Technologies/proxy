version: "3.9"

services:
  # documentation service
  docs:
    container_name: docs
    image: ghcr.io/envoii-technologies/documentation-service:latest
    ports:
      - "3400:3400"
    networks:
      - local-envoii

  # Auth service (Keycloak)
  auth:
    # image: quay.io/keycloak/keycloak:latest
    image: ghcr.io/envoii-technologies/auth-service:latest
    container_name: auth
    command:
      - start
      - --https-port=443
      - --hostname=${ME_HOSTNAME}
      #      - --hostname-port=443
      #      - --hostname-admin-url=${ROOT_URL}/auth/admin
      - --proxy=edge
      # - --log-level=debug
    environment:
      KC_DB: postgres
      KC_DB_URL: ${POSTGRES_URL}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}

      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HTTPS_PORT: 443
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      PROXY_ADDRESS_FORWARDING: true
      KEYCLOAK_FRONTEND_URL: ${ROOT_URL}/auth/
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: true
    restart: unless-stopped
    #depends_on:
    #  - postgres
    ports:
      - "8080:8080"
    networks:
      - local-envoii
    volumes:
      - object-store:/ObjectStore/

  # Backwards proxy
  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: "off" # Use 'off' for DB-less mode
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
    volumes:
      - ./proxy/kong.yml:/etc/kong/kong.yml # Mount the kong.yml file
      - ./proxy/kong.conf.default:/etc/kong/kong.conf.default
      - ./proxy/kong.conf:/etc/kong/kong.conf
    ports:
      - "80:8000" # HTTP traffic
      - "443:8443" # HTTPS traffic
      - "8001:8001" # Admin API (non-SSL)
      - "8444:8444" # Admin API (SSL)
    networks:
      - local-envoii

  #to save certificates of kong persistent. See kong.yml
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass pUgSjqkEdFJigz3jXWhE
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - local-envoii

  # React frontend
  frontend:
    container_name: frontend
    stdin_open: true
    image: ghcr.io/envoii-technologies/frontend-service:latest
    ports:
      - 3000:3000
      - 3001:3001
    volumes:
      - "/app/node_modules"
      - "./:/app"
    networks:
      - local-envoii

  # tenant service
  tenant:
    image: ghcr.io/envoii-technologies/tenant-service:latest
    container_name: tenant
    restart: on-failure
    ports:
      - "4000:4000"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: tenant-service
      SERVICE_PORT: 4000
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # user service
  user:
    image: ghcr.io/envoii-technologies/user-service:latest
    container_name: user
    restart: on-failure
    ports:
      - "4001:4001"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: user-service
      SERVICE_PORT: 4001
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # card service
  card:
    image: ghcr.io/envoii-technologies/card-service:latest
    container_name: card
    restart: on-failure
    ports:
      - "4002:4002"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: card-service
      SERVICE_PORT: 4002
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # tag service
  tag:
    image: ghcr.io/envoii-technologies/tag-service:latest
    container_name: tag
    restart: on-failure
    ports:
      - "4003:4003"
    environment:
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: tag-service
      SERVICE_PORT: 4003
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    volumes:
      - "/app/node_modules"
      - "./:/app"
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # media service. Latest from main not working.
  media:
    image: ghcr.io/envoii-technologies/media-service:latest
    container_name: media
    restart: on-failure
    ports:
      - "4004:4004"
    environment:
      NODE_ENV: development
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: media-service
      SERVICE_PORT: 4004
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
      STORAGE_ENV: ${STORAGE_ENV}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESSKEY: ${STORAGE_ACCESSKEY}
      STORAGE_SECRETKEY: ${STORAGE_SECRETKEY}
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

  # category service
  category:
    image: ghcr.io/envoii-technologies/category-service:latest
    container_name: category
    restart: on-failure
    ports:
      - "4005:4005"
    environment:
      NODE_ENV: development
      KEYCLOAK_URL: ${ROOT_URL}/auth
      SERVICE_NAME: category-service
      SERVICE_PORT: 4005
      ROOT_URL: ${ROOT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
      MONGO_ADDITIONAL_QUERY_PARAMS: ${MONGO_ADDITIONAL_QUERY_PARAMS}
      MONGO_SSL: ${MONGO_SSL}
    depends_on:
      - auth
    #  - mongodb
    networks:
      - local-envoii

volumes:
  redis-data:
  object-store:

networks:
  local-envoii:
    # external: true
    driver: bridge
